I've only done 1 hackathon before and it was a 24 one. I basically got nothing done. I don't think my mind allows myself to work in environments like that. I wouldn't sweat it much.
Hackathons are 60 percent front end, 40 percent pretending you're gonna change the world. Focus on those things
Are you able to do these things outside of a hackathon but just cave under the pressure? Or are you trying to learn these things for the first time at a hackathon?
We have a hackathon every quarter at work. The first one I contributed maybe 10 lines of code to the project/ group. I’m now about 6 or 7 in and took on a huge role in this quarters hackathon. I added close to 2000 lines of code. What I’m trying to say is keep going and recognize that EXPERIENCE makes these things easier! It’s ok not to know things.
4,"Are you part of a group? Does your hackathon organize mentors for each team?
Also, you should be coming in with stuff pre-setup if you're doing a web/mobile app. For example, I have like Flask, PostgreSQL, Heroku all setup and ready to go for hackathons."
5,is it just me or i go to hackathon to get swags
6,"I've competed at more hackathons than I should admit to. :)  


\- have templates, server configs etc ready to deploy.  
\- use templates for known and famility environments ready to execute.  
\- simple, simple, simple.  
\- accept that faking it is normal and expected in some categories.  
\- judges look for scalable ideas that will have traction.

etc. the first few hackathons I went to ranged from   
\- sitting next to a group doing nothing of value   
\- being a member of the team and while contributing to the code base, not really contributing anything of value.  
\- being the sole coder for a business team, and reworking their vague idea into a working product and actually making internet sales. coaching and reworking them on the pitch, then seeing the pitch self destruct and the team turn toxic after the event when I told them we had made money and inviting them to scale with me. (one member claimed the entire idea was theirs and demanded I hand over all the code, domains, billing details etc.) Even to the extent of threatening lawyers on me. (she had nfi and event organiser told her to chill out)  
\- being part of a solid coding team, contributing the front end to a working product with a complex back end and my team winning a reasonably high profile event.  
\- forming a loose large team on a Friday night, breaking out into 3 viable team projects over 2 days, sharing code, mixing team members as needed and 3 teams placing in judges highly commended selection.

with a few hackathons I walked out of because they were so badly run, my teams self destructed or I concluded none of the teams were worth working with due to non definition of problem/goals.

oh and I remember one guy picking a fight with me, him being repeatedly counselled by event organisers/mentors, having several event organisers/mentors approach me after the 'picking the fight' incident acknowledging my judgement/response was appropriate and justified. (he was told to leave and chill out, then return to see judging so he could learn from the experience. \[turned out he had some PTSD type trauma.\]  


Hackathons are great way to meet people, but a few events are badly run, have terrible charters. Pick wisely."
7,[deleted]
8,"Am I the only one here who don't like hackathons ( I don't even like this term ""Hackathon"" )"
9,"Don't worry about hackathons; they're just meant to be fun.

Anyway, it is true that setting up a dev environment can literally take hours (i.e. hours before your ""hello world"" program correctly builds and displays what you want), especially if you've never done such things (in some particular language / framework / technology) before.

However, hopefully you learned something, and the next time you need to create a Flask or Django web app, I expect it'll take more like a single hour rather than 12 hours."
10,I’ve avoided them like the plague my whole life because I can’t imagine performing well in an environment with severe time constraints on top of essentially arbitrary goals.
11,"The trick to winning a hackathon is — practice!  When I started going to them, I was in the same boat as you.  I couldn’t build anything.   But the thing is, if you have nothing to show after following tutorials for a weekend, it’s not because you’re bad at hackathons, it’s because there’s gaps in your knowledge.  Now you know where those gaps are, and can study up for the next one. 

This is why I like hackathons so much, and hope they can survive the current influx of cheating.  The best way to learn how to build something is to try, fail, and learn from those failures.  Unfortunately, I (and many people), don’t have the discipline to develop a long-term side project, especially as a young college student.  For many people, it’s far easier to get motivated to work hard for a weekend than work on-and-off for months.  And since each hackathon project is independent, you can explore lots of different areas.  

Please, keep going to hackathons.  Don’t worry about whether you finished your project or won any prizes, just focus on improving each time.  You’ll learn a TON"
12,"Hackathons IMO are a ""hit the ground running"" kind of process. So I think you need to know most/all of the tools you're working with ahead of time. Any time you set up or work with a ""thing"" that's new to you, there's the learning curve to conquer. Depending on the thing, it may be no trouble at all or it may be a few or several hours of slowdown just to get started. Now if you have many such things it's unlikely you're going to accomplish much in a short timeframe.

Back when I worked for a large enterprise software company, the goal of a hackathon was to work with a specific app the company itself produced and to do something cool with it. My office was formerly a small company that was acquired by this big company, and we did our own completely separate kind of work that never touched this particular app. Turns out it had a terrible installation process, so we didn't even get the thing installed until early afternoon, and only a few of us were able to complete even a minimal project."
13,"I cannot believe how much time and anxiety you guys commit to completely unrealistic and high pressure scenarios.  As somebody who's been in the field 10-15 years, this sub has been really eye opening."
14,"The trick to being successful is teaming up with people who can actually code. All of you should be able to code.

Often times, you’ll get these PM type of people who try to latch with the smart kids. Avoid these guys.

Most hackathons will have guidance and that PM touch to your project anyway, so anyone who brings PM and not coding skills is just redundant and dead weight."
15,"Almost same here mate.. Always avoided them like plague - Iwas made to sit through two or three of them tho 

I don't like the process of rushing into making something without proper research

Some of these felt like exploitation because the company who run it said they hold all the rights to the application we made"
16,"I did one hackathon. The app was super shitty I thought I was going to do some react but the randoms I matched with wanted angular. Ended up making a simple webpage w/ basic fire base integration. I wrote nothing and spent all night awake for nothing, pretty much a waste of time imo, behind on hw as well. All the winner’s coded in react or react native mostly front-end with some basic calls to firebase,... I don’t consider hackathons a good use of time, just develop a app on your own or with a team without all the pressure"
17,"Hackathons should be about having fun. I wouldn't take it very seriously.

As someone I know tends to say, hackathons are a great spot to get started on a project because regardless of how close to completion it gets, you still learn a lot. Treat it as an iterative process irrespective of time."
18,Yes but eventually you will learn enough to be effective
19,"You have the right idea using flask... just practice  on it early, set up a github repo that contains  the bones of a project, user auth, user models, landing pages,  etc.

Also, just polish up on python and jinja templates in general, and then use bootstrap to make it look okay. 

Side note: Flask, which you mentioned specifically,  has lots of absolute crap tutorials out there.  But one that is great imho is miguel  Grinberg's flask megatutorial.  All free and he walks you through step by step with downloadable and diff-able code of a reasonable Twitter clone."
20,"Somewhat related to how people win at these kinds of things.  When i was in college, a good friend and I both had the same senior project class together.  We were on different teams and his team did an amazing job.

I found out after the class that their project was done a year in advance, they got together as a group and did the project, all the coding, docs, etc... then just showed up and made the presentations.

My group was the leftovers, I was the only one that could program well and the rest just needed credit for the class.

I asked the professor about it and wanted to replace the class with another, she insisted that it would be fine, the group sucked and we barely passed.

These kinds of contests that involve speed are won before they start.  Some have done the same thing so many times that they can do it in their sleep, others have to look everything up and don't know how to glue it all together.

Take it as a learning thing and get what you can from it."
21,"I've notice that most hackathons are won by people that built apps or websites. As far as I know most schools don't focus too much on that so it makes sense that even though you have CS knowledge you are not an app-design expert. Also like others mentioned front-end is highly important as you are trying to ""sell"" an Idea. So a good designer and front-end developer is important too. Don't beat yourself up! I would say if you like it keep going and you'll get better, struggling in hackathons does not mean you are a bad programmer!"
22,"I'm decent at \*ideas\* for hackathons.  But implementation, in stacks I don't know, on a timeline?  Yeah, no; I'm not your best pick there.

It has not slowed my career that I can tell."
23,"The trick is to learn before the hackathon, not during. If you already know how to use API's and how to set up Flask apps, you can focus on actually building something cool while you're there.

Also, as mentioned already, it doesn't hurt to fake a database or two ;)"
24,"If it makes you feel any better, I've been to two hackathons, and in both cases I botched is so hard that we didn't have a submittable project.  In one case I just left on the first day because I had so much trouble setting up my Ruby environment. I basically bricked my environment because I had no idea how version managers worked, so I couldn't even run the project 😭

&#x200B;

This was early in my career though, I've got about 10 years experience now and do pretty well in the field, but I don't go to hackathons any more :D"
25,"This is normal, people who do well at hackathons tend to be doing that sorta thing regularly on their own, enough that the usual infra/backend/ui stuff becomes easy so they can actually focus on the problem.

I've treated all of mine as a subsidized learning opportunity and mostly ate pizza and played with cool hardware that I otherwise wouldn't have access to."
26,"On the only hackthon i have been to our app made everything that was required and was truly connected between all platforms. Still the group that won was the one with the flashy UI and the world changing promises. So yeah. Don't base yourself on your hackathon performance. They only measure if you are a SPECIFIC TYPE of developer, not if you ARE a developer. Like Olympic shooting vs hunting deer or being a gangster vs home defense, to be good in those you need to shoot a gun for all, but each one needs a different aspect of it."
27,"The skills needed for a hackathon and the skills needed to be a good programmer are not exactly the same. Some people will have a knack for, other people simply don't function well in those environments. It's totally fine if that's not your thing, it doesn't really say anything about your skills as a programmer."
28,are you at nwhacks haha
29,"Even if you're a good programmer it will take a few times to get good.

Experienced people have templates, dev environments etc. setup for them to use (can be said about competitive programming too).

For hackathons specifically I've heard it is about the idea/concept and not soi much implementation."
30,"Hackathons is all about practice.

If you've made tens of different landing pages in your life, you probably know how to make a rather simple one pretty fast. 

As others have said, the easy part is making a bare basics front-end , the hard part is figuring out business logic and how to translate that to a product (website / app). 

So, if you're incredibly fast at doing the trivial parts, you can spend more time on the things that mater. If you're spending 80% of the time trying to cobble together a nice presentation, with zero functionality, then that's a sign that you need to practice on getting the presentation done much faster."
31,"How long have you been a professional?

If you're not yet then I think it's totally fine. If you are and at early stage then it's fine as well. If you're mid or senior level engineer, I'd try to see understand what your weaknesses are, as well as practice. At this stage, picking up new frameworks and whatnot shouldn't be too massive of a challanege... and you should already have some background knowledge about how to solve an xyz problem."
32,are hackathons only for students studying or can people working also participate? Never attended a hackathon while in college coz I didnt  know such a thing existed. Would love to attend one if I am allowed. I work as a SWE now.
33,"This is pretty normal. There are definitely intelligent people who are creating bomb projects, but as mentioned a lot of people are bs'ing trying to win. When you said "" I thought I was a decent programmer"" I'm assuming you mean you have a lot of fundamentals down. Those are essential. You need to take the next step in learning how to create something now. Hackathons can be used for learning. It's really good to keep you motivated to learn for 20 hours in a 3 day span."
34,"Yes. Especially if you go to them unexperienced.However, I went from literally not being able to do anything at all, to actually being able to contribute, and also being able to start the actual backbone of my own projects relatively quickly.Sometimes my contributions are very trivial, but for the most part I feel like I can actually make something from scratch minus the actual html/css part of the front end (I know front end frameworks and can work within that space well).I can also probably dive into any project and make SOME contribution now.Think about it. You're making a fully functioning vertical prototype of an idea in the space of about 2 days.Usually, you see full blown engineers with a ton of experience at them.Student run ones are a little different, but the expectations are pretty similar.

You get better at it over time.Personally, I want to get to a point where I can whip up projects and ideas on a whim, and contribute to any project with very little lead time. At that point, I will be able to turn almost any idea into reality and i'll be able to make all kinds of cool shit, and i'll probably be a very valuable person in the market as well.

I wouldn't stop going to them.  
It's sort of a no lose situation if you think about it.  
It's not like you'll slow anyone down if you can't contribute, you'll just be on the sidelines.  
If you're having trouble with a group taking you, just try to ask the people at your favorite project if you can sit in on the side and try to contribute whatever you can and offer whatever help you can.  
I can't imagine you going to a full blown hackathon with tons of people and everyone saying no.  
You might get rubbed off by a few people but that's life and eventually you won't be.  
And, unless your skill level is above the people at the place, I promise that you'll almost always walk away from every hackathon with something new that you learned and a different way of looking at things.And, you'll still be able to see the whole process from start to finish, and also see the general codebase.Plus, as you improve, you should be able to make increasingly better contributions and eventually be like one of the leads on the project.They usually put the projects on github/some version of version control, so you'll also be able to see all of the code of a full vertical prototype, and see what good coding style looks like and what a project structure looks like.

Just keep improving and keep going to them."
35,I also feel the same way about LC mediums and sometime easys. I just let it go and doze off with a (comfort zone) feeling that my current job pays me fine.
36,"Keep going forward, bro"
37,"OP, I’ve been going thru your exact  situation these past few hours as well. I have a hunch we’re at the same hackathon and I’ve just passed you by a few times; feel free to DM me if you wanna rant or talk about our experience, I’m not working on my failed project anymore for now rip"
38,"I've only been to one hackathon. It turned into a sad reflection of corporate culture. The people from a marketing background made their own little huddle and then came back about 4 hours later and said ""This is what we want. Make it."" They then fucked around and ate Danish pastries for the rest of the weekend until the demo at the end where they presented the developers work."
39,"Well, hackathons are awesome as long as you learn something. Whether it be learning how to make APIs or trying to learn how make one work(keys and stuffs) . I think after 4-5 hackathons you start getting use to it and then the process became repeating for me. It is one of those experiences where I forced myself to learn to make small projects. 
Now, I don't go to hackathons anymore specially look out for the local ones, the judges are shit and the projects are copied most of the time."
40,"Hackathons are not about coding, they are about prototyping and presentation, at least if you want to win. Usually the best presentation wins and usually the jury is extremly biased. If you don't care about winning and prizes, you can have a lot of fun and learn a lot."
41,"Yes, as a backend engineer in a team which starts out with the best intentions, I usually end up building something else as the frontenders usually just utilise dummy returns from infra. :/."
42,"The first problem with these hackathons is that either the problem isn't described well enough to make a ground breaking idea or as a lot of people are mentioning no supervision is done to prevent cheaters from being vetted. I honestly have a hard time understanding how some people put up a functioning UI with their idea within two days because it takes weeks to formulate a real solid UI alone. 

The people created the hackathon should base more merit on the feasibilty of the idea and put in limitations on what can be used... I know there are smart people but leveling of vetting is a joke when it comes down to it. Same thing for hiring managers they really need to work to find a good candidate for the positition and vise versa for the candidate to find a SW job but unforturnately the contract never gets furfilled both ways as it tends to lean heavily on the candidate."
43,"I attended a few Hackathons, among those in only one of them I was able to code my idea, though couldn't secure any win.

However I can assure you, the winners, outright proved they are followers of Siraj Raval, because they later spoke about this,  which I was able to overhear."
44,You won't be good at your first one. Maybe by the 3rd. Unless of course your school has a dedicated class for it.
45,"I realize this might be a dumb question but, what is a hackathon? Google doesn't help at all lmao"
46,"THIS IS NORMAL. PLEASE KEEP GOING TO HACKATHONS.

You don't have nothing to show for it. You have gained some knowledge about Flask and working with some backend frameworks. I didn't really start to get comfortable at hackathons until I took on some projects at home and had an idea of the basic components that went into making a webapp (a touch of front end skills, a touch of server programming, a touch of DB). Once you get a little understanding, you'll start to run with it and your skills grow exponentially fast.

TLDR; if you're going through hell, keep going."
47,Hm
48,am I the only one here that thinks hackatons are an abomination and among the most unhealthy things ever conceived in the field?
49,"Well, keep at it and let us know how you feel after a dozen.  These and condensed learning experiences.   So, if you learn something from it, then it was worthwhile.

Remember that programming is lots of failure on the way to success."
50,"It depends on your goal, but if you're trying to actually develop something you can show off at the end, a hackathon isn't really the right place to start learning a new stack or setting up a dev environment from scratch. You will want to use the tools that you're most intimately familiar with, because you want as few deviations as possible from straight up development work.

You wouldn't show up to an auto race and start wrenching on your car while all the rest of the drivers are crossing the starting line.

That said, if you *want* to use a hackathon as just a learning experience, that's totally fine too. Lots of people do this. But you're unlikely to have anything interesting to show at the end of it.

To me, the joy of a hackathon is in flexing the knowledge you already have, and letting your creativity loose on an interesting idea. The more familiar you are with your tools, the easier this is going to be."
51,"What I've learned from Hackathons is don't be too ambitious, do something extremely simple but really polished."
52,Every single team I’ve been a part of for a hackathon was more about getting as much frontend work done to show judges the basic idea of your app and demonstrating how it could be useful to our world. This includes hardcoding values and adding page to page navigation. The hackathon that I won was 50% about how well we presented our idea and how valuable we made it seem. The other half was the actual app and making it at least seem like it was functional for demoing purposes even though the prototype would be useless if we tried to actually put it to use.
53,"Idk about your question, but the atmosphere here costs me heavy breathing (but not in a good way). These people are so negative and suicidal that makes me even more miserable than I can be wherever I stand. I don't think I want to be a member of Reddit every time I try to give it a try. Here everyone pours their diarrhea not from their butts but from their mouths. I don't get motivated by people, I get upset by people."
54,"Essentially nothing in a Hackathon matters but the front end. Nobody is going to care about how well optimised your db queries are, what your project folder structure is or how you're following clean code patterns.

Does it look cool? Wow, you came first and got an Amazon voucher and a Bluetooth speaker 👏

The exception is where you're working with a specific hardware technology, e.g. you've got to do something involving a Kinect or Lord knows what.

Don't worry about it. It's fun to be good at blasting out projects but it's not massively reflective of your workplace value."
55,"Using APIs and general web server architecture are somewhat standard concepts, although I don’t necessarily expect every dev to know how a web server should be architected. You may have just gotten overwhelmed. Kind of like flipping to the end of an origami book and trying to fold something complex before tackling the basics. 

On the other hand, take what confused you and work on it until the next one. Use the hackathons as a measure of what you should be working on."
56,It is not normal to struggle with such simple things at hackathons. Re-evaluate your software development knowledge and prepare appropriately for your next event.
57,"My personal opinion is that a hackathon has no relation to actual work you do in industry. The same also for LeetCode-style questions in coding interviews; these have no relation to real world programming or problems you'll face.

On the other hand, any event that pushes you to learn more is a good thing. Personally, I just pick up a new personal project, take some MOOCs, or even pursue a new college degree or accreditation. In that light, I wouldn't feel bad at all for entering a hackathon and getting steamrolled, even if it's not a thing I'd personally do."
58,"Man, when I went to a hackathon I just wanted to hand out my resume to some of the sponsored companies and socialize with the local university students that I would never meet otherwise. The latter was a mess with everyone wanting to win and not wanting to talk. If I found someone I could have enjoyed spending time with there I could have easily given them a reference."
59,"Basically hackathons in a nutshell are trying to shoot the moon and scrambling to get things to work, or having no idea what is going on or what you're doing, or a combination of both among other things.

Maybe rethink of why you go to hackathons, if you're talking about the college ones.  I tried going to so many and I'm pretty sure there were negatives than positives for me (including forgoing a healthy lifestyle), so don't feel so bad if hackathons aren't the best thing for you; I kinda wished I realized I wasn't cut out for hackathons sooner tbh, although most of the time I was going just for the travel also."
60,"Hackathons are cool but they have very little use in the real world. In fact, if a candidate told me they like to attend a lot of Hackathons, I'd be a bit worried about the quality of their code and their tests. I don't need developers who can code fast, I need developers who can work together to build something of quality, even if it takes them a bit longer.

Seriously, don't worry about it. In fact, if you're not having fun, cut that out of your life and do something you like doing. If you want to improve your skills as a developer, try to learn more about principles of software engineering or try to pick up another technology stack. That will make you a better developer, not this hackathon bs."
61,"A stupid question,were you in SFIT hackathon lately?"
62,Hackathons are for the cool kids to brag. Pay them no attention.
63,"Hacakathin is very very very practical. And to be successful, you also need to have a very good business pitch.

So don’t worry, it just mean you don’t yet have much practical experience, but your algorithmic skills might be very good.

(From an organizer of hackathons)"
64,"It's normal to not make much progress with new frameworks and shit.  That's what I don't like about these rushed things.  OTOH, you should be able to follow Django's main tutorial and get that working in a matter of an hour or two, so I'm not sure what's wrong there..."
